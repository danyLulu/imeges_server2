services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: image-hosting-backend
    ports:
      - "8000:8000"  # Проброс порта для прямого доступа к бэкенду (для отладки)
    volumes:
      - images:/app/images  # Монтируем volume для изображений
      - logs:/app/logs      # Монтируем volume для логов
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

  nginx:
    image: nginx:1.25-alpine
    container_name: image-hosting-nginx
    ports:
      - "8080:80"  # Nginx будет доступен на порту 8080 хост-машины
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro  # Монтируем наш nginx.conf
      - images:/app/images:ro  # Монтируем volume с изображениями в Nginx (только для чтения)
      - ./static:/app/static:ro  # Монтируем статические файлы для Nginx (только для чтения)
    depends_on:
      app:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - app-network

volumes:
  images:  # Определяем volume для изображений
    driver: local
  logs:    # Определяем volume для логов
    driver: local

networks:
  app-network:
    driver: bridge