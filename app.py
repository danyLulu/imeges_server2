"""–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""

import http.server
import re
import logging
import json
import os
import time
from urllib.parse import urlparse
import uuid
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
STATIC_FILES_DIR = 'static'
UPLOAD_DIR = 'images'
MAX_FILE_SIZE = 5 * 1024 * 1024  # 5 –ú–ë
ALLOWED_EXTENSIONS = ['.jpg', '.jpeg', '.png', '.gif']
LOG_DIR = 'logs'

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if not os.path.exists(UPLOAD_DIR):
    os.makedirs(UPLOAD_DIR)

if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s: %(message)s',
    handlers=[
        logging.FileHandler(os.path.join(LOG_DIR, 'app.log'), encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)


class ImageHostingHandler(http.server.BaseHTTPRequestHandler):
    def _set_headers(self, status_code=200, content_type='text/html'):
        self.send_response(status_code)
        self.send_header('Content-type', content_type)
        self.end_headers()

    def _get_content_type(self, file_path):
        if file_path.endswith('.html'):
            return 'text/html'
        elif file_path.endswith('.css'):
            return 'text/css'
        elif file_path.endswith('.js'):
            return 'application/javascript'
        elif file_path.endswith(('.png', '.jpg', '.jpeg', '.gif')):
            return 'image/' + file_path.split('.')[-1]
        else:
            return 'application/octet-stream'

    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤."""
        parsed_path = urlparse(self.path)
        
        if parsed_path.path == '/':
            # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            self._handle_home_page()
        elif parsed_path.path.startswith('/images/'):
            # –ó–∞–ø—Ä–æ—Å—ã –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è Nginx
            logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: {self.path}. –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è Nginx.")
            self._set_headers(404, 'text/plain')
            self.wfile.write(b"404 Not Found - Images should be served by Nginx")
        else:
            # –î—Ä—É–≥–∏–µ GET –∑–∞–ø—Ä–æ—Å—ã
            logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π GET –∑–∞–ø—Ä–æ—Å: {self.path}")
            self._set_headers(404, 'text/plain')
            self.wfile.write(b"404 Not Found")

    def _handle_home_page(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
        try:
            # –ß–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π HTML —Ñ–∞–π–ª
            static_file_path = os.path.join(STATIC_FILES_DIR, 'index.html')
            if os.path.exists(static_file_path):
                with open(static_file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                self._set_headers(200, 'text/html')
                self.wfile.write(content.encode('utf-8'))
                logger.info("–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            else:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç—É—é HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É
                html_content = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Image Hosting Service</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .container { max-width: 600px; margin: 0 auto; }
        .upload-area { border: 2px dashed #ccc; padding: 20px; text-align: center; margin: 20px 0; }
        .upload-area:hover { border-color: #999; }
        #fileInput { margin: 10px 0; }
        #uploadBtn { background: #007bff; color: white; padding: 10px 20px; border: none; cursor: pointer; }
        #uploadBtn:hover { background: #0056b3; }
        #result { margin: 20px 0; padding: 10px; }
        .success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
        .error { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üñºÔ∏è Image Hosting Service</h1>
        <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–µ–≥–æ.</p>
        
        <div class="upload-area" onclick="document.getElementById('fileInput').click()">
            <p>–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—é–¥–∞</p>
            <input type="file" id="fileInput" accept=".jpg,.jpeg,.png,.gif" style="display: none;">
        </div>
        
        <button id="uploadBtn" onclick="uploadFile()" disabled>–ó–∞–≥—Ä—É–∑–∏—Ç—å</button>
        
        <div id="result"></div>
        
        <h3>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</h3>
        <ul>
            <li>JPG/JPEG</li>
            <li>PNG</li>
            <li>GIF</li>
        </ul>
        <p><strong>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:</strong> 5 –ú–ë</p>
    </div>

    <script>
        const fileInput = document.getElementById('fileInput');
        const uploadBtn = document.getElementById('uploadBtn');
        const result = document.getElementById('result');

        fileInput.addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                uploadBtn.disabled = false;
                result.innerHTML = `<p>–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: ${file.name} (${(file.size / 1024 / 1024).toFixed(2)} –ú–ë)</p>`;
            }
        });

        async function uploadFile() {
            const file = fileInput.files[0];
            if (!file) return;

            const formData = new FormData();
            formData.append('file', file);

            try {
                uploadBtn.disabled = true;
                uploadBtn.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
                
                const response = await fetch('/upload', {
                    method: 'POST',
                    body: formData
                });

                const data = await response.json();
                
                if (data.status === 'success') {
                    result.innerHTML = `
                        <div class="success">
                            <h3>‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!</h3>
                            <p><strong>–ò–º—è —Ñ–∞–π–ª–∞:</strong> ${data.filename}</p>
                            <p><strong>–°—Å—ã–ª–∫–∞:</strong> <a href="${data.url}" target="_blank">${data.url}</a></p>
                        </div>
                    `;
                } else {
                    result.innerHTML = `
                        <div class="error">
                            <h3>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
                            <p>${data.message}</p>
                        </div>
                    `;
                }
            } catch (error) {
                result.innerHTML = `
                    <div class="error">
                        <h3>‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏</h3>
                        <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª: ${error.message}</p>
                    </div>
                `;
            } finally {
                uploadBtn.disabled = false;
                uploadBtn.textContent = '–ó–∞–≥—Ä—É–∑–∏—Ç—å';
            }
        }
    </script>
</body>
</html>
                """
                self._set_headers(200, 'text/html')
                self.wfile.write(html_content.encode('utf-8'))
                logger.info("–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è) —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            self._set_headers(500, 'text/plain')
            self.wfile.write(b"500 Internal Server Error")


    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤."""
        parsed_path = urlparse(self.path)
        if parsed_path.path == '/upload':
            self._handle_upload()
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π POST –∑–∞–ø—Ä–æ—Å –Ω–∞: {self.path}")
            self._set_headers(404, 'application/json')
            response = {"status": "error", "message": "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            self.wfile.write(json.dumps(response).encode('utf-8'))

    def _handle_upload(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞."""
        start_time = time.time()
        
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Content-Type
            content_type_header = self.headers.get('Content-Type')
            if not content_type_header or not content_type_header.startswith('multipart/form-data'):
                logger.warning("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Content-Type")
                self._set_headers(400, 'application/json')
                response = {"status": "error", "message": "–û–∂–∏–¥–∞–µ—Ç—Å—è multipart/form-data"}
                self.wfile.write(json.dumps(response).encode('utf-8'))
                return

            # 2. –ò–∑–≤–ª–µ–∫–∞–µ–º boundary –∏–∑ Content-Type
            try:
                boundary = content_type_header.split('boundary=')[1].encode('utf-8')
            except IndexError:
                logger.warning("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - boundary –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Content-Type")
                self._set_headers(400, 'application/json')
                response = {"status": "error", "message": "Boundary –Ω–µ –Ω–∞–π–¥–µ–Ω"}
                self.wfile.write(json.dumps(response).encode('utf-8'))
                return

            # 3. –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            try:
                content_length = int(self.headers['Content-Length'])
                if content_length > MAX_FILE_SIZE * 2:  # –ù–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å –Ω–∞ —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é multipart
                    logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - –∑–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ({content_length} –±–∞–π—Ç)")
                    self._set_headers(413, 'application/json')  # Payload Too Large
                    response = {"status": "error", "message": "–ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π"}
                    self.wfile.write(json.dumps(response).encode('utf-8'))
                    return

                raw_body = self.rfile.read(content_length)
            except (TypeError, ValueError):
                logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Content-Length")
                self._set_headers(411, 'application/json')  # Length Required
                response = {"status": "error", "message": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Content-Length"}
                self.wfile.write(json.dumps(response).encode('utf-8'))
                return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                self._set_headers(500, 'application/json')
                response = {"status": "error", "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞"}
                self.wfile.write(json.dumps(response).encode('utf-8'))
                return

            # 4. –ü–∞—Ä—Å–∏–º multipart/form-data (—É–ø—Ä–æ—â–µ–Ω–Ω–æ, —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)
            parts = raw_body.split(b'--' + boundary)
            file_data = None
            filename = None

            for part in parts:
                if b'Content-Disposition: form-data;' in part and b'filename=' in part:
                    try:
                        headers_end = part.find(b'\r\n\r\n')
                        headers_str = part[0:headers_end].decode('utf-8')

                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                        filename_match = re.search(r'filename="([^"]+)"', headers_str)
                        if filename_match:
                            filename = filename_match.group(1)

                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
                        file_data = part[headers_end + 4:].strip()  # +4 –¥–ª—è \r\n\r\n
                        break
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —á–∞—Å—Ç–∏ multipart: {e}")
                        continue

            if not file_data or not filename:
                logger.warning("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ multipart-–∑–∞–ø—Ä–æ—Å–µ")
                self._set_headers(400, 'application/json')
                response = {"status": "error", "message": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ"}
                self.wfile.write(json.dumps(response).encode('utf-8'))
                return

            # 5. –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞
            file_size = len(file_data)
            file_extension = os.path.splitext(filename)[1].lower()

            if file_extension not in ALLOWED_EXTENSIONS:
                logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ ({filename})")
                self._set_headers(400, 'application/json')
                response = {"status": "error",
                            "message": f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –î–æ–ø—É—Å—Ç–∏–º—ã: {', '.join(ALLOWED_EXTENSIONS)}"}
                self.wfile.write(json.dumps(response).encode('utf-8'))
                return

            if file_size > MAX_FILE_SIZE:
                logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - —Ñ–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ({filename}, {file_size} –±–∞–π—Ç)")
                self._set_headers(400, 'application/json')
                response = {"status": "error",
                            "message": f"–§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä {MAX_FILE_SIZE / (1024 * 1024):.0f}MB"}
                self.wfile.write(json.dumps(response).encode('utf-8'))
                return

            # 6. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            unique_filename = f"{uuid.uuid4().hex}{file_extension}"
            target_path = os.path.join(UPLOAD_DIR, unique_filename)

            try:
                with open(target_path, 'wb') as f:
                    f.write(file_data)

                file_url = f"/images/{unique_filename}"
                processing_time = time.time() - start_time
                
                logger.info(f"–£—Å–ø–µ—Ö: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ '{filename}' (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ '{unique_filename}') –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞ {processing_time:.2f}—Å. –°—Å—ã–ª–∫–∞: {file_url}")
                
                self._set_headers(200, 'application/json')
                response = {
                    "status": "success",
                    "message": "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω",
                    "filename": unique_filename,
                    "url": file_url,
                    "processing_time": f"{processing_time:.2f}—Å"
                }
                self.wfile.write(json.dumps(response).encode('utf-8'))

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{filename}' –≤ '{target_path}': {e}")
                self._set_headers(500, 'application/json')
                response = {"status": "error", "message": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞"}
                self.wfile.write(json.dumps(response).encode('utf-8'))
                
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            self._set_headers(500, 'application/json')
            response = {"status": "error", "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}
            self.wfile.write(json.dumps(response).encode('utf-8'))


def run_server(server_class=http.server.HTTPServer, handler_class=ImageHostingHandler, port=8000):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä."""
    server_address = ('', port)
    httpd = server_class(server_address, handler_class)
    logger.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫: {UPLOAD_DIR}")
    logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤: {LOG_DIR}")
    logger.info(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {MAX_FILE_SIZE / (1024 * 1024):.0f} –ú–ë")
    logger.info(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(ALLOWED_EXTENSIONS)}")
    
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    finally:
        httpd.server_close()
        logger.info("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == '__main__':
    run_server()
